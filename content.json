{"meta":{"title":"旺仔个人博客","subtitle":"一个知识沉淀的地方","description":"越努力越幸运！","author":"WangZai","url":"http://yoursite.com"},"pages":[{"title":"Categories","date":"2018-11-28T08:19:08.000Z","updated":"2018-11-28T08:20:46.894Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2018-11-28T01:20:41.097Z","updated":"2018-11-28T01:20:40.926Z","comments":true,"path":"pay/index.html","permalink":"http://yoursite.com/pay/index.html","excerpt":"","text":"请旺仔喝瓶水，嘻嘻"},{"title":"Tags","date":"2018-11-28T04:23:27.000Z","updated":"2018-11-28T08:25:55.961Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""},{"title":"各种工具与插件","date":"2018-11-30T08:30:10.000Z","updated":"2018-12-01T02:56:32.296Z","comments":true,"path":"tool/index.html","permalink":"http://yoursite.com/tool/index.html","excerpt":"","text":"收录一些常用的软件或插件之类的 1.markdownPad2 链接：https://pan.baidu.com/s/1IFpNlIM9eSzclqnnDxbxKA提取码：gxb5 安装时验证（下载文件里面有使用说明） 邮箱：1Soar360@live.com 授权秘钥：1GBPduHjWfJU1mZqcPM3BikjYKF6xKhlKIys3i1MU2eJHqWGImDHzWdD6xhMNLGVpbP2M5SN6bnxn2kSE8qHqNY5QaaRxmO3YSMHxlv2EYpjdwLcPwfeTG7kUdnhKE0vVy4RidP6Y2wZ0q74f47fzsZo45JE2hfQBFi2O9Jldjp1mW8HUpTtLA2a5/sQytXJUQl/QKO0jUQY4pa5CCx20sV1ClOTZtAGngSOJtIOFXK599sBr5aIEFyH0K7H4BoNMiiDMnxt1rD8Vb/ikJdhGMMQr0R4B+L3nWU97eaVPTRKfWGDE8/eAgKzpGwrQQoDh+nzX1xoVQ8NAuH+s4UcSeQ== 装完mardowdnPad后还要装一个插件awesomium_v1.6.6_sdk_win.exe，直接安装就行"}],"posts":[{"title":"正则表达式（Regular Expression)","slug":"RE","date":"2019-02-13T05:26:09.000Z","updated":"2019-02-13T05:35:53.656Z","comments":true,"path":"2019/02/13/RE/","link":"","permalink":"http://yoursite.com/2019/02/13/RE/","excerpt":"","text":"移步至其他博客看基本的语法 https://www.cnblogs.com/Mustr/p/6060242.html 个人的一些代码练习(java代码） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104import org.junit.Test;/** * 正则表达式实践 * * @author chenhuowang * */public class RegularExpression &#123; /* * 利用matches()，注意：用matches方法必须匹配所有字符 */ @Test public void testQQ() &#123; String qq = &quot;1627a660&quot;; String reg = &quot;[1-9]\\\\d&#123;4,10&#125;&quot;; boolean flag = qq.matches(reg); if (flag) &#123; System.out.println(&quot;qq is ok&quot;); &#125; else System.out.println(&quot;qq is false&quot;); &#125; @Test public void testStart() &#123; String str = &quot;abctong&quot;; String reg = &quot;^[a-zA-Z]\\\\w*$&quot;; boolean flag1 = str.matches(reg); if (flag1) &#123; System.out.println(&quot;字母开头&quot;); &#125; else System.out.println(&quot;非字母开头&quot;); &#125; /* * 识别电话号码 */ @Test public void testPhoneNum() &#123; String pn = &quot;17127792821&quot;; String phone = &quot;^1[345789]\\\\d&#123;9&#125;$&quot;; // 检测是否为手机号码 boolean isPhone = pn.matches(phone); if (isPhone) &#123; System.out.println(&quot;The phone number is ok&quot;); // 检测为电信的号码 String CTCC = &quot;^1(33|49|53|73|77|80|81|89|91|99)\\\\d&#123;8&#125;$&quot;; boolean isCTCC = pn.matches(CTCC); if (isCTCC) &#123; System.out.println(&quot;The number is CTCC(中国电信)&quot;); &#125; else &#123; System.out.println(&quot;不是电信&quot;); // 中国联通 String CUCC = &quot;^1(30|31|32|45|55|56|66|71|75|76|85|86)\\\\d&#123;8&#125;$&quot;; boolean isCUCC = pn.matches(CUCC); if (isCUCC) &#123; System.out.println(&quot;The number is CUCC(中国联通)&quot;); &#125; else &#123; System.out.println(&quot;The number is CUCC(中国移动)&quot;); &#125; &#125; &#125; else &#123; System.out.println(&quot;The phone number is false&quot;); &#125; &#125; /* * 向前引用\\1 \\2 \\n String的split()方法 分隔 */ @Test public void testXiangQianYinYong() &#123; // String reg = &quot;(.)\\\\1+&quot;; // 查看叠词 如 aa ccc // String str = &quot;aabbcde&quot;; // boolean isFlag = str.matches(reg); //需匹配所有字符 // if (isFlag) // System.out.println(&quot;有叠词&quot;); // else // System.out.println(&quot;没有叠词&quot;); String str = &quot;erkktyqqquizzzzzo&quot;; String reg = &quot;(.)\\\\1+&quot;;// 按照叠词来进行切割 // 可以将规则封装成一个组。用()完成。组的出现都有编号。 // 从1开始。 想要使用已有的组可以通过 \\n(n就是组的编号)的形式来获取。 String[] arr = str.split(reg); System.out.println(arr.length); for (String s : arr) &#123; System.out.println(s); &#125; &#125;&#125;","categories":[{"name":"java后台","slug":"java后台","permalink":"http://yoursite.com/categories/java后台/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"http://yoursite.com/tags/正则表达式/"}]},{"title":"springboot项目中加入springSecurity实战","slug":"springSecurity_181210","date":"2018-12-10T02:58:36.000Z","updated":"2018-12-11T01:56:03.569Z","comments":true,"path":"2018/12/10/springSecurity_181210/","link":"","permalink":"http://yoursite.com/2018/12/10/springSecurity_181210/","excerpt":"","text":"在 Web 应用开发中，安全一直是非常重要的一个方面。安全虽然属于应用的非功能性需求，但是应该在应用开发的初期就考虑进来。如果在应用开发的后期才考虑安全的问题，就可能陷入一个两难的境地：一方面，应用存在严重的安全漏洞，无法满足用户的要求，并可能造成用户的隐私数据被攻击者窃取；另一方面，应用的基本架构已经确定，要修复安全漏洞，可能需要对系统的架构做出比较重大的调整，因而需要更多的开发时间，影响应用的发布进程。因此，从应用开发的第一天就应该把安全相关的因素考虑进来，并在整个应用的开发过程中. Spring Security 简介Spring 是一个非常流行和成功的 Java 应用开发框架。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。一般来说，Web 应用的安全性包括用户认证（Authentication）和用户授权（Authorization）两个部分。用户认证指的是验证某个用户是否为系统中的合法主体，也就是说用户能否访问该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认证过程。用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的权限。 #实战应用（一） 1.pom.xml引入Spring Security12345678910&lt;!-- spring security --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt; &lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt; &lt;!-- &lt;version&gt;3.0.2.RELEASE&lt;/version&gt; --&gt;&lt;!--引入后sec:authorize=\"isAuthenticated()\"失效--&gt;&lt;/dependency&gt; 2.主控制层12345678910111213141516171819202122@GetMapping(\"/\")public String root()&#123; return \"redirect:/index\";&#125;@GetMapping(\"/index\")public String index()&#123; return \"index\";&#125;@GetMapping(\"/login\")public String login()&#123; return \"login\";&#125;@GetMapping(\"/login-error\")public String loginError(Model model)&#123; model.addAttribute(\"loginError\",true); model.addAttribute(\"errorMsg\",\"登录失败，用户名或密码错误！\"); return \"login\";&#125; 3.config包下配置SecurityConfig.java1234567891011121314151617181920212223242526272829303132@EnableWebSecuritypublic class SecurityConfig extends WebSecurityConfigurerAdapter&#123; private static final String KEY = \"waylau.com\"; /** * 自定义配置 */ @Override protected void configure(HttpSecurity http) throws Exception &#123; http.authorizeRequests() .antMatchers(\"/css/**\",\"/js/**\",\"/fonts/**\",\"/index\").permitAll() .antMatchers(\"/users/**\").hasRole(\"ADMIN\") //需要相应的角色才能访问 .and() .formLogin() //基于Form 表单登录验证 .loginPage(\"/login\").failureUrl(\"/login-error\") .and().rememberMe().key(KEY) // 启用 remember me .and().exceptionHandling().accessDeniedPage(\"/403\"); // 处理异常，拒绝访问就重定向到 403 页面;; &#125; /** * 认证信息管理 */ @Autowired public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception&#123; auth .inMemoryAuthentication() //认证信息存储在内存中 .withUser(\"admin\").password(\"123456\").roles(\"ADMIN\"); &#125; &#125; 源码附录：https://pan.baidu.com/s/1zkcu8w64VmldyGqJ6sKC1w","categories":[{"name":"java后台","slug":"java后台","permalink":"http://yoursite.com/categories/java后台/"}],"tags":[{"name":"springSecurity","slug":"springSecurity","permalink":"http://yoursite.com/tags/springSecurity/"}]},{"title":"Thymeleaf随笔","slug":"thymeleaf","date":"2018-12-09T07:51:27.000Z","updated":"2018-12-09T14:07:14.566Z","comments":true,"path":"2018/12/09/thymeleaf/","link":"","permalink":"http://yoursite.com/2018/12/09/thymeleaf/","excerpt":"","text":"1.maven中引入thymeleaf1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt; application.properties（resources目录下）的配置 123456# THYMELEAF spring.thymeleaf.encoding=UTF-8# 热部署静态文件spring.thymeleaf.cache=false# 使用HTML5标准spring.thymeleaf.mode=HTML5 2.html头部引入12&lt;html xmlns:th=\"http://www.thymeleaf.org\" xmlns:layout=\"http://www.ultraq.net.nz/thymeleaf/layout\"&gt; 3.fragment使用fragment类似于JSP的tag，在html中文件中，可以将多个地方出现的元素块用fragment包起来使用,常用于header和footer thymeleaf th:replace th:include th:insert 的区别 fragment页面：data-th-fragment 1234567//header.html中&lt;body&gt; &lt;div data-th-fragment=\"header\"&gt; &lt;h1&gt;Thymeleaf in action&lt;/h1&gt; &lt;a hreaf=\"/users\"&gt;首页&lt;/a&gt; &lt;/div&gt;&lt;/body&gt; 页面引用fragment: 1&lt;div th:replace=\"fragments/header :: header\"&gt;...&lt;/div&gt; 4.插入文本th:text1&lt;h3 th:text=\"$&#123;userModel.title&#125;\"&gt;...&lt;/h3&gt; 5. 循环th:each12345&lt;tr th:each=\"user : $&#123;userModel.userList&#125;\"&gt; &lt;td th:text=\"$&#123;user.id&#125;\"&gt;ID&lt;/td&gt; &lt;td th:text=\"$&#123;user.name&#125;\"&gt;Name&lt;/td&gt; &lt;td th:text=\"$&#123;user.email&#125;\"&gt;Email&lt;/td&gt;&lt;/tr&gt; 6.条件 th:if123&lt;tr th:if=\"$&#123;userModel.userList.size()&#125; eq 0\"&gt; &lt;td colspan=\"3\"&gt;没有用户信息！！&lt;/td&gt;&lt;/tr&gt; gt：great than（大于）&gt; ge：great equal（大于等于）&gt;= eq：equal（等于）== lt：less than（小于）&lt; le：less equal（小于等于）&lt;= ne：not equal（不等于）!= 7.对象 th:object123456789&lt;form action=\"/users\" method=\"POST\" th:object=\"$&#123;userModel.user&#125;\"&gt; &lt;input type=\"hidden\" name=\"id\" th:value=\"*&#123;id&#125;\"/&gt; 名称:&lt;br/&gt; &lt;input type=\"text\" name=\"name\" th:value=\"*&#123;name&#125;\"/&gt; &lt;br/&gt; 邮箱:&lt;br/&gt; &lt;input type=\"text\" name=\"email\" th:value=\"*&#123;email&#125;\"/&gt; &lt;input type=\"submit\" value=\"提交\"/&gt;&lt;/form&gt; 8.超链接 th:href123456789//网页&lt;a hreaf=\"view.html\" th:href=\"@&#123;'/users/'+$&#123;user.id&#125;&#125;\" th:text=\"$&#123;user.name&#125;\"&gt;name&lt;/a&gt;//后台@GetMapping(\"&#123;id&#125;\")public ModelAndView view(@PathVariable(\"id\") Long id,Model model)@GetMapping(value=\"/edit/&#123;id&#125;\")public ModelAndView edit(@PathVariable(\"id\") Long id,Model model)","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"Thymeleaf","slug":"Thymeleaf","permalink":"http://yoursite.com/tags/Thymeleaf/"}]},{"title":"Spring Boot中使用hibernate","slug":"springBoot_hibernate","date":"2018-12-09T03:41:01.000Z","updated":"2018-12-09T14:46:49.952Z","comments":true,"path":"2018/12/09/springBoot_hibernate/","link":"","permalink":"http://yoursite.com/2018/12/09/springBoot_hibernate/","excerpt":"","text":"1.pox.xml文件配置1234567891011&lt;!-- mysql --&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- JPA --&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt; 2.application.properties配置123456789//DataSource spring.datasource.url=jdbc:mysql://localhost:3306/blog?characterEncoding=utf-8&amp;useSSL=falsespring.datasource.username=rootspring.datasource.password=123456spring.datasource.driver-class-name=com.mysql.jdbc.Driver// JPAspring.jpa.show-sql = truespring.jpa.hibernate.ddl-auto=create-drop 3.添加实体类注解12345678910//实体类上@Entity@Table(name=\"user\")//主键@Id @GeneratedValue(strategy=GenerationType.IDENTITY) //自增策略//字段@Column(nullable = false) // 映射为字段，值不能为空 4.建立实体仓库让实体仓库（接口）继承CrudRepository&lt;T,Id&gt;，即可实现基本的增删改查12public interface UserRepository extends CrudRepository&lt;User,Long&gt;&#123;&#125; 5.在控制层中可调用CrudRepository的方法常用的方法有： findAll() findOne() sava() delete() 注意：别忘了在mysql中先建立一个对应的数据库，否则无法取得连接（报错）","categories":[{"name":"java后台","slug":"java后台","permalink":"http://yoursite.com/categories/java后台/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"hibernate","slug":"hibernate","permalink":"http://yoursite.com/tags/hibernate/"}]},{"title":"日常记录-Day1209","slug":"Day1209","date":"2018-12-09T03:41:01.000Z","updated":"2018-12-09T12:40:50.814Z","comments":true,"path":"2018/12/09/Day1209/","link":"","permalink":"http://yoursite.com/2018/12/09/Day1209/","excerpt":"","text":"1.static和final的用法 static可以修饰变量，方法，代码块。 static修饰的变量在内存中只有一份，在类加载的时候被完成初始化，且被该类的所有实例共享。 static修饰的方法必须实现，不能用abstract修饰。 static修饰的代码块在类加载完成后就会执行代码块的内容。 执行顺序：（重要，好多面试题都考）父类静态代码块-子类静态代码块-父类非静态代码块-父类构造方法-子类非静态代码块-子类构造方法 final修饰的变量，引用不可变，但引用的内容是可变的。 final修饰的方法，不能被继承，不能被子类修改。 final修饰的类不能被继承。 final修饰的形参不可变。 注意：final Map可以修改内容，final 常量不能修改 对比集合：map、list12final Map map =new HashMap(); final List list =new ArrayList(); map和list 对应的是栈中存储的地址，final表示地址不能修改，但是地址对应的内存区域的值是可以修改的； 对比常量12final String name=”Joke”; final int age=10; name和age对应的是栈中存储的地址，同样final表示地址不能修改，但是地址的存储跟常量的值有关，给他重新赋值会指向另外一个对象，地址就改变了 2.HashMap和ConcurrentHashMapConcurrentHashMap是线程安全的，它的底层实现是将大的数组分成几段小的segment，每个小的segment上都有锁，在插入元素时，先找到要插入到哪个segment里面，再获取这个segment上的锁。在高并发时，Hashtable的效率很低下，因为所有线程都竞争同一个锁，而ConcurrentHashMap则不是，当一个线程占用了一个segment的锁，其他段的数据也能被其他线程访问。 HashMap 和 HashTable 的不同 ？ 1private final ConcurrentMap&lt;Long,User&gt; userMap=new ConcurrentHashMap&lt;Long,User&gt;() ; 3.线程安全的AtomicLong对长整形进行原子操作,常用的方法是incrementAndGet()12private static AtomicLong counter=new AtomicLong();Long id=counter.incrementAndGet(); 4.将Map集合里面的值取出并存入list集合中用到Map的values()方法1List&lt;User&gt; users=new ArrayList&lt;User&gt;(userMap.values())","categories":[{"name":"日常记录","slug":"日常记录","permalink":"http://yoursite.com/categories/日常记录/"}],"tags":[{"name":"fianl_static","slug":"fianl-static","permalink":"http://yoursite.com/tags/fianl-static/"},{"name":"ConcurrentHashMap","slug":"ConcurrentHashMap","permalink":"http://yoursite.com/tags/ConcurrentHashMap/"},{"name":"AtomicLong","slug":"AtomicLong","permalink":"http://yoursite.com/tags/AtomicLong/"}]},{"title":"快速创建springboot的Web项目","slug":"springboot","date":"2018-12-08T01:18:36.000Z","updated":"2018-12-08T13:48:40.040Z","comments":true,"path":"2018/12/08/springboot/","link":"","permalink":"http://yoursite.com/2018/12/08/springboot/","excerpt":"","text":"1.通过Spring Initializr初始化一个Web项目 1).浏览器打开地址：https://start.spring.io 1https://start.spring.io 2).选好项目，设置好Group、Artifact名称等，点击Generate Project alk下载，之后 即可（以gradle项目为例） 2.编译、启动gradle项目 cd 到项目更目录，然后输入命令：gradle build 1gradle build 第一次启动gradle 项目有点慢，要下载依赖包，下载后在项目目录下会多一个build文件夹 运行构建后的jar文件： 1java -jar build/libs/SpringBoot-Initial-0.0.1-SNAPSHOT.jar (注意：SpringBoot-Initial为对应的项目名称！)(注意：ctrl+c结束线程) 修改build.gradle的中央仓库 使用阿里云仓库： 12345//mavenCentral() maven &#123; url 'http://maven.aliyun.com/nexus/content/groups/public/'&#125; 各种注解 程序入口（核心注解） 1@SpringBootApplication 控制层的注解： 1@Controller 和@RestController @Controller 和@RestController的区别： 返回页面用@Controller，要想返回数据就用@RestController,这个注解对于返回数据比较方便，因为它会自动将对象实体转换为JSON格式。 @RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。 也就是说对于下面代码：使用@Controller会跳转到index页面，而使用@RestController只是在页面返回字符串“index”。 1234@GetMapping(\"/index\")public String index() &#123; return \"index\";&#125; 12@RequestMapping(\"/admins\")@GetMapping 1@GetMapping(\"/&#123;username&#125;\") 1@GetMapping(\"/&#123;username&#125;/blogs\") 1@GetMapping(\"/&#123;username&#125;/blogs/&#123;id&#125;\") 1234567@GetMappingpublic String listBlogs(@RequestParam(value=\"order\",required=false,defaultValue=\"new\") String order, @RequestParam(value=\"keyword\",required=false,defaultValue=\"\") String keyword )&#123;System.out.println(\"order:\"+order+\",keyword\"+keyword);return \"redirect:/index?order=\"+order+\"&amp;keyword=\"+keyword;&#125;","categories":[{"name":"java后台","slug":"java后台","permalink":"http://yoursite.com/categories/java后台/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"gradle","slug":"gradle","permalink":"http://yoursite.com/tags/gradle/"}]},{"title":"日常记录-Day1208","slug":"Day1208","date":"2018-12-08T01:18:36.000Z","updated":"2018-12-08T14:11:36.327Z","comments":true,"path":"2018/12/08/Day1208/","link":"","permalink":"http://yoursite.com/2018/12/08/Day1208/","excerpt":"","text":"明天要学习的内容： spring security CSRF 登录时”记住我”功能","categories":[{"name":"日常记录","slug":"日常记录","permalink":"http://yoursite.com/categories/日常记录/"}],"tags":[{"name":"IDEA","slug":"IDEA","permalink":"http://yoursite.com/tags/IDEA/"},{"name":"music","slug":"music","permalink":"http://yoursite.com/tags/music/"}]},{"title":"日常记录-Day1207","slug":"Day1207","date":"2018-12-07T08:34:57.000Z","updated":"2018-12-09T12:41:01.817Z","comments":true,"path":"2018/12/07/Day1207/","link":"","permalink":"http://yoursite.com/2018/12/07/Day1207/","excerpt":"","text":"1.修改配置，不需要参数提示。在 IntelliJ IDEA 2016.3.4(64) 这个版本更新之后，发现在代码中，方法调用的地方，会显示一些方法参数的提示，点不到，也不是一下就能看懂，对于阅读代码，很是不得劲。所以，还是找到地方，给他关闭了吧。 2.关于本地网页引入网易云音乐失效执行本地html文件，iframe里面的javascript没有效果，传到服务器上就可以了。因为本地用的 file:/// 不是http， 所以chrome认为不能有文件访问功能","categories":[{"name":"日常记录","slug":"日常记录","permalink":"http://yoursite.com/categories/日常记录/"}],"tags":[{"name":"IDEA","slug":"IDEA","permalink":"http://yoursite.com/tags/IDEA/"},{"name":"music","slug":"music","permalink":"http://yoursite.com/tags/music/"}]},{"title":"生成动态背景","slug":"background","date":"2018-12-01T11:50:41.000Z","updated":"2018-12-01T11:55:59.011Z","comments":true,"path":"2018/12/01/background/","link":"","permalink":"http://yoursite.com/2018/12/01/background/","excerpt":"","text":"不发明重复的轮子原则https://blog.csdn.net/qq_33699981/article/details/60330891","categories":[],"tags":[{"name":"动态背景","slug":"动态背景","permalink":"http://yoursite.com/tags/动态背景/"}]},{"title":"在实体引用中, 实体名称必须紧跟在 '&' 后面","slug":"qianduan1201","date":"2018-12-01T06:39:38.000Z","updated":"2018-12-10T01:32:17.951Z","comments":true,"path":"2018/12/01/qianduan1201/","link":"","permalink":"http://yoursite.com/2018/12/01/qianduan1201/","excerpt":"","text":"在maven中创建spring boot 项目中，其中用到main.js（里面用到Ajax来返回数据，用于生成右侧页面，其中报错 1org.xml.sax.SAXParseException: 在实体引用中, 实体名称必须紧跟在 &apos;&amp;&apos; 后面。 分析：用ajax返回的数据，实际问题是xml中默认’&amp;’是非法字符， 解决：用&amp;amp; 替代 &amp;","categories":[{"name":"前端","slug":"前端","permalink":"http://yoursite.com/categories/前端/"}],"tags":[{"name":"springboot","slug":"springboot","permalink":"http://yoursite.com/tags/springboot/"},{"name":"main.js","slug":"main-js","permalink":"http://yoursite.com/tags/main-js/"}]},{"title":"Hexo添加评论功能","slug":"comment","date":"2018-12-01T03:02:06.000Z","updated":"2018-12-01T03:14:30.478Z","comments":true,"path":"2018/12/01/comment/","link":"","permalink":"http://yoursite.com/2018/12/01/comment/","excerpt":"","text":"hexo添加评论功能需要借助第三方工具，多说已经下架，而来比力版本太低而且还要翻墙，用起来很烦，经过多次尝试，决定用Valine评论系统 不发明重复的轮子原则 我给大家推荐一篇博客，里面写得挺详细的，在此致谢原博主！ https://www.jianshu.com/p/728a9594bb6c","categories":[{"name":"博客系统","slug":"博客系统","permalink":"http://yoursite.com/categories/博客系统/"}],"tags":[{"name":"评论","slug":"评论","permalink":"http://yoursite.com/tags/评论/"}]},{"title":"留言板","slug":"liuyan","date":"2018-12-01T02:49:09.000Z","updated":"2018-12-01T03:16:44.562Z","comments":true,"path":"2018/12/01/liuyan/","link":"","permalink":"http://yoursite.com/2018/12/01/liuyan/","excerpt":"","text":"有什么想对博主说的，请在下面留言，记得写上昵称哦，最好把邮箱也写上以便博主联系","categories":[{"name":"留言","slug":"留言","permalink":"http://yoursite.com/categories/留言/"}],"tags":[]},{"title":"域名购买和与Github绑定","slug":"yuming","date":"2018-11-29T12:10:50.000Z","updated":"2018-11-30T08:23:15.922Z","comments":true,"path":"2018/11/29/yuming/","link":"","permalink":"http://yoursite.com/2018/11/29/yuming/","excerpt":"","text":"在搭建完hexo+github系统后，虽说github提供了免费的服务，但是在访问的时候感觉很不方便，每次都有输入yourname.github.io，难记又难听，这是加个域名访问就方便了，而且又方便记忆！ 1. 购买域名目前提供域名服务主要有阿里云和腾讯云，这个看个人吧，新用户的一般都有优惠的，比如我以新用户身份在腾讯云买了个1块钱一年的域名（.xyz)。下面我以腾讯云为例： 去到腾讯云官网：https://cloud.tencent.com 在产品中找到域名注册 在输入框中输入自己想用的域名，点击查询，查看域名情况，如果被注册了就换一个咯 登录账号（可以QQ或微信扫码登录），第一次登录的话按照提示先完善个人信息，这里就不不多说了，购买完后 拿到github上的IP 拿到ip的方式很多，我举一个常用的的，打开命令窗口，输入命令 ping yourname.github.io 拿到四位数字组成的ip地址后，下面绑定腾讯云 解析腾讯云域名 点击解析 》新手快速添加 》把刚刚的ip**地址**填上（不支持粘贴，手动添加） 最后一步：打开您的github仓库（yourname.github.io) 把您的域名填上保存就大功告成了 访问测试 打开浏览器，输入 您的域名 访问。 如果不行，先不急看看你的url地址（访问地址）是否正确，是否是https开头 介绍完毕，若有问题可以在我的微博私信我","categories":[{"name":"博客系统","slug":"博客系统","permalink":"http://yoursite.com/categories/博客系统/"}],"tags":[{"name":"gitbub","slug":"gitbub","permalink":"http://yoursite.com/tags/gitbub/"},{"name":"域名","slug":"域名","permalink":"http://yoursite.com/tags/域名/"}]},{"title":"Hexo+github搭建(二）","slug":"theme","date":"2018-11-29T11:52:46.000Z","updated":"2018-11-29T14:47:11.787Z","comments":true,"path":"2018/11/29/theme/","link":"","permalink":"http://yoursite.com/2018/11/29/theme/","excerpt":"","text":"hexo从零到搭建完整并上传github后,可以根据自己的喜好更换主题，比如现在很多人用nexT主题,我个人现在用的是hueman 1.更换主题在博客目录下，右键 》 Git Bash Here 》输入 git clone https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman 执行完后，在thenes目录下会有一个hueman文件夹 2.修改hexo根目录下的_config.yml文件 theme: hueman 3.重命名theme》hueman文件目录下的_config.yml.example为_config.yml4.(可选项），安装此插件，这样博客可以支持搜索功能，在hexo的根目录下 $ npm install -S hexo-generator-json-content 5. 最后在hexo根目录执行以下命令就可以把更改部署上GitHub服务器了 $ hexo clean $ hexo generate $ hexo deploy 6.配置主题修改logo的url,微博等 7.导航栏加菜单如若在导航栏上加一个菜单，只需在source目录下加一个和菜单访问地址名相同的文件夹，该文件夹里只放一个文件index.md(该文件用markdown编写），只需在index.md中添加要响应的内容。 8. 创建分类和标签 创建“分类”选项 进入博客所在文件夹。执行命令 $ hexo new page categories 成功后会提示： INFO Created: ~/Documents/blog/source/categories/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： --- title: 文章分类 date: 2017-05-27 13:47:40 --- 添加type: “categories”到内容中，添加后是这样的： --- title: 文章分类 date: 2017-05-27 13:47:40 type: &quot;categories&quot; --- 保存并关闭文件。 给文章添加“categories”属性 打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。 --- title: jQuery对表单的操作及更多应用 date: 2017-05-26 12:12:57 categories: - web前端 --- 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 创建“标签”选项 和创建“分类”选项类似 $ hexo new page tags --- title: 文章分类 date: 2017-05-27 13:47:40 type: &quot;tags&quot; --- 给文章添加“tags”属性 打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 表单验证就是这篇文章的标签了 --- title: jQuery对表单的操作及更多应用 date: 2017-05-26 12:12:57 categories: - web前端 tags: - jQuery - 表格 - 表单验证 --- 教程结束，赶紧去设置吧！","categories":[{"name":"博客系统","slug":"博客系统","permalink":"http://yoursite.com/categories/博客系统/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"gitbub","slug":"gitbub","permalink":"http://yoursite.com/tags/gitbub/"}]},{"title":"Hexo+github搭建(一）","slug":"hexoDaJian","date":"2018-11-29T02:38:23.000Z","updated":"2018-11-29T04:44:56.353Z","comments":true,"path":"2018/11/29/hexoDaJian/","link":"","permalink":"http://yoursite.com/2018/11/29/hexoDaJian/","excerpt":"","text":"这是一个hexo从零到搭建完整,按照以下步骤就行，如若了解修改主题，改域名请看下一章 本章内容 安装Git Bash 安装NodeJs 安装hexo 生成SSH并添加到github 部署项目 上传到github 1.安装Git Bash 下载地址为：https://gitforwindows.org(我个人是windows系统） 安装步骤：双击下载好的exe文件，一路next就好啦 安装好后，可以打开gitbash，查看版本： 方式1:(桌面）右键鼠标 -&gt; Git Base Here -&gt; （输入命令）git version 方式二：win+r -&gt; cmd -&gt; git version 2.安装NodeJs hexo是基于nodeJS环境的静态博客，里面的npm工具很有用啊，所以还是老老实实把这玩意儿装了吧 下载地址：https://nodejs.org/en(说明：LTS为长期支持版，Current为当前最新版) 安装步骤：反正下载好msi文件后，双击打开安装，也是一路next，不过在Custom Setup这一步记得选 Add to PATH ,这样你就不用自己去配置电脑上环境变量了，装完在按 win + r 快捷键调出运行，然后输入cmd确定，在cmd中输入path可以看到你的node是否配置在里面（环境变量），没有的话你就自由发挥吧。 查看版本：命令 node -v 3.安装hexo 先创建一个文件夹（用来存放所有blog的东西），然后cd到该文件夹下(或者在该文件夹右键，点击 Git Bash Here) 安装hexo命令： 1npm i -g hexo 安装完成后，查看版本： 1hexo -v 初始化命令：hexo init,初始化完成之后打开所在的文件夹可以看到以下文件： 其中node_modules：是依赖包， public：存放的是生成的页面， scaffolds：命令生成文章等的模板， source：用命令创建的各种文章， themes：主题， _config.yml：整个博客的配置， db.json：source解析所得到的， package.json：项目所需模块项目的配置信息 4. 搭桥到github 没账号的创建账号：https://github.com，注册问题就不说了，相信大家都会 注册好了，接着创建一个repo，名称为yourname.github.io, 其中yourname是你的github名称，按照这个规则创建才有用哦，如下： 创建完成后，回到gitbash中，配置github账户信息（YourName和YourEail都替换成你自己的）： 创建SSH 在gitbash中输入：ssh-keygen -t rsa -C &quot;你的邮箱&quot; ，生成ssh。然后按下图的方式找到id_rsa.pub文件的内容,复制 将上面获取的ssh放到github中：个人（头像）》 settings 》SSH and GPG keys 》 New SSH key 》（title随便写）key里粘贴上面复制的内容 》Add SSH key 在gitbash中验证是否添加成功：ssh -T git@github.com 完成下一步你就成功啦！耐住性子！！！ 5.临门一脚 用编辑器打开你的blog项目，修改_config.yml文件的一些配置(冒号之后都是有一个半角空格的) deploy: type: git repo: https://github.com/YourgithubName/YourgithubName.github.io.git branch: master 回到gitbash中，进入你的blog目录，分别执行以下命令： hexo clean hexo generate hexo server 注：若上面出问题，可能是hexo 3.0把服务器独立成个别模块，需要单独安装 npm i hexo-server 打开浏览器输入：http://localhost:4000 接着你就可以看到页面了，是不是很开心涅 ：） 最后一步，上传到github 又安装一波（插件）：先打开 Git Bash ,分别输入 cd / cd hexo npm install –save hexo-deployer-git 注意：没有回到hexo目录,很可能会安装失败！ 执行命令(建议每次都按照如下步骤部署)： hexo clean hexo generate hexo deploy 注意deploy的过程中要输入你的username及passward 在浏览器中输入http://yourgithubname.github.io就可以看到你的个人博客啦，是不是很兴奋！ 修改主题和域名看下一篇","categories":[{"name":"博客系统","slug":"博客系统","permalink":"http://yoursite.com/categories/博客系统/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"},{"name":"gitbub","slug":"gitbub","permalink":"http://yoursite.com/tags/gitbub/"}]}]}